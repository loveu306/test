{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplateBlock","styled","div","_templateObject","TodoTemplate","_ref","children","react_default","a","createElement","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","todoReducer","state","action","type","concat","todo","map","id","Object","objectSpread","done","filter","initialTodos","text","TodoProvider","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","nextId","useRef","Provider","value","useTodoState","useContext","useTodoDispatch","TodoHeadBlock","TodoHead_templateObject","TasksLeft","_templateObject2","TodoHead","today","Date","dateString","toLocaleString","year","month","day","dayName","weekday","undoneTasks","className","length","Remove","TodoItem_templateObject","TodoItemBlock","TodoItem_templateObject2","CheckCircle","_templateObject3","props","css","_templateObject4","Text","_templateObject5","_templateObject6","React","memo","onClick","index_esm","TodoListBlock","TodoList_templateObject","TodoList","todos","components_TodoItem","key","CircleButton","button","TodoCreate_templateObject","open","TodoCreate_templateObject2","InsertFormPositioner","TodoCreate_templateObject3","InsertForm","form","TodoCreate_templateObject4","Input","input","TodoCreate_templateObject5","_useState","useState","_useState2","setOpen","_useState3","_useState4","setValue","Fragment","onSubmit","e","preventDefault","current","autoFocus","onChange","target","placeholder","GlobalStyle","createGlobalStyle","App_templateObject","App","components_TodoTemplate","components_TodoHead","components_TodoList","components_TodoCreate","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1eefc45.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoTemplateBlock = styled.div`\n  width: 512px;\n  height: 768px;\n\n  position: relative;\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\n  margin: 0 auto;\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\n\nfunction TodoTemplate({ children }) {\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\n}\n\nexport default TodoTemplate;\n","import React, { createContext, useReducer, useContext, useRef } from 'react';\n\nconst TodoStateContext = createContext(null);\nconst TodoDispatchContext = createContext(null);\nconst TodoNextIdContext = createContext(null);\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE':\n      return state.concat(action.todo);\n    case 'TOGGLE':\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\n      );\n    case 'REMOVE':\n      return state.filter(todo => todo.id !== action.id);\n    default:\n      return state;\n  }\n}\n\nconst initialTodos = [\n  {\n    id: 1,\n    text: '아침 산책',\n    done: true\n  },\n  {\n    id: 2,\n    text: '오늘의 뉴스 읽기',\n    done: true\n  },\n  { id: 3, text: '샌드위치 사 먹기', done: false },\n  { id: 4, text: '리액트 공부하기', done: false }\n];\n\nexport function TodoProvider({ children }) {\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        <TodoNextIdContext.Provider value={nextId}>\n          {children}\n        </TodoNextIdContext.Provider>\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n}\n\nexport function useTodoState() {\n  return useContext(TodoStateContext);\n}\n\nexport function useTodoDispatch() {\n  return useContext(TodoDispatchContext);\n}\n\nexport function useTodoNextId() {\n  return useContext(TodoNextIdContext);\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoHeadBlock = styled.div`\n  h1 {\n    margin: 0;\n    font-size: 36px;\n    color: #343a40;\n  }\n  .day {\n    margin-top: 4px;\n    color: #868e96;\n    font-size: 21px;\n  }\n  padding-top: 48px;\n  padding-left: 32px;\n  padding-right: 32px;\n  padding-bottom: 24px;\n  border-bottom: 1px solid #e9ecef;\n`;\n\nconst TasksLeft = styled.div`\n  color: #20c997;\n  font-size: 18px;\n  margin-top: 40px;\n  font-weight: bold;\n`;\n\nfunction TodoHead() {\n  const today = new Date();\n\n  const dateString = today.toLocaleString('ko-KR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  const dayName = today.toLocaleString('ko-KR', { weekday: 'long' });\n  const todos = useTodoState();\n  const undoneTasks = todos.filter(todo => !todo.done);\n\n  return (\n    <TodoHeadBlock>\n      <h1>{dateString}</h1>\n      <div className=\"day\">{dayName}</div>\n      <TasksLeft>할 일 {undoneTasks.length}개 남음</TasksLeft>\n    </TodoHeadBlock>\n  );\n}\n\nexport default TodoHead;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdDone, MdDelete } from 'react-icons/md';\nimport { useTodoDispatch } from '../TodoContext';\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6;\n  font-size: 24px;\n  cursor: pointer;\n  &:hover {\n    color: #ff6b6b;\n  }\n  display: none;\n`;\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      display: initial;\n    }\n  }\n`;\n\nconst CheckCircle = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 16px;\n  border: 1px solid #ced4da;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n  ${props =>\n    props.done &&\n    css`\n      border: 1px solid #38d9a9;\n      color: #38d9a9;\n    `}\n`;\n\nconst Text = styled.div`\n  flex: 1;\n  font-size: 21px;\n  color: #495057;\n  ${props =>\n    props.done &&\n    css`\n      color: #ced4da;\n    `}\n`;\n\nfunction TodoItem({ id, done, text }) {\n  const dispatch = useTodoDispatch();\n\n  const onToggle = () => {\n    dispatch({\n      type: 'TOGGLE',\n      id\n    });\n  };\n\n  const onRemove = () => {\n    dispatch({\n      type: 'REMOVE',\n      id\n    });\n  };\n\n  return (\n    <TodoItemBlock>\n      <CheckCircle done={done} onClick={onToggle}>\n        {done && <MdDone />}\n      </CheckCircle>\n      <Text done={done}>{text}</Text>\n      <Remove onClick={onRemove}>\n        <MdDelete />\n      </Remove>\n    </TodoItemBlock>\n  );\n}\n\nexport default React.memo(TodoItem);\n","import React from 'react';\nimport styled from 'styled-components';\nimport TodoItem from './TodoItem';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n`;\n\nfunction TodoList() {\n  const todos = useTodoState();\n  return (\n    <TodoListBlock>\n      {todos.map(todo => (\n        <TodoItem\n          id={todo.id}\n          text={todo.text}\n          done={todo.done}\n          key={todo.id}\n        />\n      ))}\n    </TodoListBlock>\n  );\n}\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\n\nconst CircleButton = styled.button`\n  background: #38d9a9;\n  &:hover {\n    background: #63e6be;\n  }\n  &:active {\n    background: #20c997;\n  }\n\n  z-index: 5;\n  cursor: pointer;\n  width: 80px;\n  height: 80px;\n  display: block;\n  align-items: center;\n  justify-content: center;\n  font-size: 60px;\n  position: absolute;\n  left: 50%;\n  bottom: 0px;\n  transform: translate(-50%, 50%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: 0.125s all ease-in;\n  ${props =>\n    props.open &&\n    css`\n      background: #ff6b6b;\n      &:hover {\n        background: #ff8787;\n      }\n      &:active {\n        background: #fa5252;\n      }\n      transform: translate(-50%, 50%) rotate(45deg);\n    `}\n`;\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  bottom: 0;\n  left: 0;\n  position: absolute;\n`;\n\nconst InsertForm = styled.form`\n  background: #f8f9fa;\n  padding-left: 32px;\n  padding-top: 32px;\n  padding-right: 32px;\n  padding-bottom: 72px;\n\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px;\n  border-top: 1px solid #e9ecef;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border-radius: 4px;\n  border: 1px solid #dee2e6;\n  width: 100%;\n  outline: none;\n  font-size: 18px;\n  box-sizing: border-box;\n`;\n\nfunction TodoCreate() {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState('');\n  const dispatch = useTodoDispatch();\n  const nextId = useTodoNextId();\n\n  const onToggle = () => setOpen(!open);\n  const onChange = e => setValue(e.target.value);\n  const onSubmit = e => {\n    e.preventDefault();\n    dispatch({\n      type: 'CREATE',\n      todo: {\n        id: nextId.current,\n        text: value,\n        done: false\n      }\n    });\n    nextId.current += 1;\n    setOpen(false);\n    setValue('');\n  };\n\n  return (\n    <>\n      {open && (\n        <InsertFormPositioner>\n          <InsertForm onSubmit={onSubmit}>\n            <Input\n              autoFocus\n              onChange={onChange}\n              value={value}\n              placeholder=\"할 일을 입력 후, Enter 를 누르세요\"\n            />\n          </InsertForm>\n        </InsertFormPositioner>\n      )}\n      <CircleButton onClick={onToggle} open={open}>\n        <MdAdd />\n      </CircleButton>\n    </>\n  );\n}\n\nexport default React.memo(TodoCreate);\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef\n  }\n`;\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCreate />\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}